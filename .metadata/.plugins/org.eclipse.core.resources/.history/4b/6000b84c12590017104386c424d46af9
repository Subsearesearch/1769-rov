/*
 * @brief no-RTOS LWIP HTTP Webserver example
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2014
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "lwip/init.h"
#include "lwip/opt.h"
#include "lwip/sys.h"
#include "lwip/memp.h"
#include "lwip/tcpip.h"
#include "lwip/ip_addr.h"
#include "lwip/netif.h"
#include "lwip/timers.h"
#include "netif/etharp.h"

#if LWIP_DHCP
#include "lwip/dhcp.h"
#endif

#include "board.h"
#include "lpc_phy.h"
#include "arch/lpc17xx_40xx_emac.h"
#include "arch/lpc_arch.h"
#include "httpd.h"
#include "lwip_fs.h"

#include "BNO055.h"

#include <math.h>

#include <string.h>
#include <ctype.h>
#include <stdlib.h>

//#define MICRO2 1

#define redT		0
#define orangeT		1
#define whiteT		2
#define greenT		3
#define lightBlueT	4
#define darkBlueT	5

#define FRT	orangeT
#define FLT	whiteT
#define BRT	redT
#define BLT	darkBlueT
#define RVT	greenT
#define LVT	lightBlueT

//Command value indexes.
#define TX	0
#define TY	1
#define TZ	2
#define RX	3
#define RY	4
#define RZ	5
#define BTN 6

//Board LED.
#define REDLED		0
#define GREENLED	1
#define BLUELED		2

#define PCLK_PWM1_BY8	((1<<13)|(1<<12))
#define PCLK_PWM1_BY4	~(PCLK_PWM1_BY8)

#define MAXPW	200

#define SPEED_100KHZ         100000

#define QW	0
#define QX	1
#define QY	2
#define QZ	3

#define BNO055_SAMPLERATE_DELAY_MS (100)
#define dt BNO055_SAMPLERATE_DELAY_MS

//Fixed decimal point (2^DEC_PT).
#define DEC_PT	(int64_t) (1<<14)

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/
#if !defined(LWIP_FATFS_SUPPORT)
#endif

/* NETIF data */
static struct netif lpc_netif;

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

extern char ROVparams[];
extern char ROVparam_vals[];
extern char http_index_html[];
extern Bool toggle;
extern uint16_t htmlSize;

uint32_t WDP[] = {4, 28};
static int mode_poll;   /* Poll/Interrupt mode flag */
static I2C_XFER_T xfer;
//uint8_t message[] = "\0Joey was here.";

//Quaternion.
typedef struct {
	int32_t w;
	int32_t x;
	int32_t y;
	int32_t z;
} Quat;

//Bigger quaternion for fixed point multiplication.
typedef struct {
	int64_t w;
	int64_t x;
	int64_t y;
	int64_t z;
} Quat64;

//Axis angle
typedef struct {
	int32_t w;
	int32_t x;
	int32_t y;
	int32_t z;
} AxisAngle;

//Bigger axis angle
typedef struct {
	int64_t w;
	int64_t x;
	int64_t y;
	int64_t z;
} AxisAngle64;

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Set I2C mode to polling/interrupt */
static void i2c_set_mode(I2C_ID_T id, int polling)
{
	if(!polling) {
		mode_poll &= ~(1 << id);
		Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandler);
		NVIC_EnableIRQ(id == I2C0 ? I2C0_IRQn : I2C1_IRQn);
	} else {
		mode_poll |= 1 << id;
		NVIC_DisableIRQ(id == I2C0 ? I2C0_IRQn : I2C1_IRQn);
		Chip_I2C_SetMasterEventHandler(id, Chip_I2C_EventHandlerPolling);
	}
}

/* Initialize the I2C bus */
static void i2c_app_init(I2C_ID_T id, int speed)
{
	Board_I2C_Init(id);

	/* Initialize I2C */
	Chip_I2C_Init(id);
	Chip_I2C_SetClockRate(id, speed);

	/* Set default mode to interrupt */
	i2c_set_mode(id, 0);
}

//Delay. Dependant upon clock speed.
void _delay_ms (uint16_t ms)
{
 uint16_t delay;
 volatile uint32_t i;
 for (delay = ms; delay >0 ; delay--)
//1ms loop with -Os optimisation
  {
  for (i=3500; i >0;i--){};
  }
}

//Convert a byte to a string.
void hexToStr (uint8_t hex, char *string) {
	string[0] = "0123456789ABCDEF"[(hex & 0xF0)>>4];
	string[1] = "0123456789ABCDEF"[hex & 0x0F];
}

//Send bytes to the IMU using I2C.
void writeIMU(uint8_t regAddr, const uint8_t *data, uint8_t number) {

	uint8_t TXbuf[number + 1];

	TXbuf[0] = regAddr;

	memcpy((char *) (TXbuf + 1), (char *) data, number * sizeof(uint8_t));

//	xfer.rxBuff = (uint8_t *) http_index_html;
	xfer.rxSz = 0x00;
	xfer.slaveAddr = IMU_ADDR;
	xfer.txBuff = TXbuf;
	xfer.txSz = (int) number + 1;

	Chip_I2C_MasterTransfer(I2C1, &xfer);
}

//Send a single byte to the IMU.
void writeIMUbyte(uint8_t regAddr, const uint8_t data) {

	uint8_t dataOut[2];

	dataOut[0] = regAddr;
	dataOut[1] = data;

	xfer.rxSz = 0;
	xfer.slaveAddr = IMU_ADDR;
	xfer.txBuff = dataOut;
	xfer.txSz = 2;

	Chip_I2C_MasterTransfer(I2C1, &xfer);
}

//Read a single byte from the IMU.
uint8_t readIMUbyte(uint8_t regAddr) {

	uint8_t dataIn;

	xfer.rxBuff = &dataIn;
	xfer.rxSz = 1;
	xfer.slaveAddr = IMU_ADDR;
	xfer.txBuff = &regAddr;
	xfer.txSz = 1;

	Chip_I2C_MasterTransfer(I2C1, &xfer);

	return dataIn;
}

//Read bytes from the IMU.
void readIMU(uint8_t regAddr, uint8_t *data, uint8_t number) {

	xfer.rxBuff = data;
	xfer.rxSz = number;
	xfer.slaveAddr = IMU_ADDR;
	xfer.txBuff = &regAddr;
	xfer.txSz = 1;

	Chip_I2C_MasterTransfer(I2C1, &xfer);
}

//Setup IMU.
uint8_t initIMU() {

	uint8_t selfTest = 0;

//	//Reset IMU.
//	_delay_ms(700);
//	writeIMUbyte(SYS_TRIGGER, RST_SYS);
//	_delay_ms(1000);

	//Check to make sure that the IMU passed its self test.
	selfTest = readIMUbyte(ST_RESULT);

	//Axis Remap.
	writeIMUbyte(AXIS_MAP_CONFIG, (X_TO_X | Y_TO_Y | Z_TO_Z));
	//Axis Sign.
	writeIMUbyte(AXIS_MAP_SIGN, (POS_X_AXIS | POS_Y_AXIS | POS_Z_AXIS));

	//Temp units = C.
	writeIMUbyte(UNIT_SEL, (Windows | DegreesC | MetersPerSec2));

	//Start IMU.
	writeIMUbyte(OPR_MODE, NDOF);
	_delay_ms(10);	//Wait for IMU to switch modes.

	return selfTest;
}

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	/* LED0 is used for the link status, on = PHY cable detected */
	SystemCoreClockUpdate();
	Board_Init();

	i2c_app_init(I2C1, SPEED_100KHZ);

	//Set water detection pin.
	Chip_GPIO_SetPinDIRInput(LPC_GPIO, WDP[0], WDP[1]);

	/* Initial LED state is off to show an unconnected cable state */
	Board_LED_Set(0, false);
	Board_LED_Set(1, false);

	//Initialize IMU.
	initIMU();

	/* Setup a 1mS sysTick for the primary time base */
	SysTick_Enable(1);

}

//Twos complement.
uint32_t neg(uint32_t var) {
	return ~var + 1;
}

//PWM initialization code.
void InitPWM(void) {

	Chip_PWM_Init(LPC_PWM1);

	//Enable PWM1 power.
	LPC_SYSCTL->PCONP |= SYSCTL_CLOCK_PWM1;

	//PWM peripheral clock = PCLK.
	LPC_SYSCTL->PCLKSEL[0] &= PCLK_PWM1_BY4;

	//First alternate pin function (PWM1-PWM2).
	LPC_IOCON->PINSEL[4] = (IOCON_FUNC1<<0) | (IOCON_FUNC1<<2) | (IOCON_FUNC1<<4) | (IOCON_FUNC1<<6) | (IOCON_FUNC1<<8) | (IOCON_FUNC1<<10);

	//Disable pullup resistors.
	LPC_IOCON->PINMODE[4] = (IOCON_MODE_INACT<<0) | (IOCON_MODE_INACT<<2)| (IOCON_MODE_INACT<<4) | (IOCON_MODE_INACT<<6) | (IOCON_MODE_INACT<<8) | (IOCON_MODE_INACT<<10);

	//One clock pulse every microsecond.
	LPC_PWM1->PR = SystemCoreClock / (4 * 1000000) - 1;

	//Frequency of 50Hz or 20ms.
	Chip_PWM_SetTime(LPC_PWM1, 20000);

	//Set pulseWidth to 1500us.
	for (uint8_t i = 1; i <= 6; i++) {
//		Chip_PWM_SetPulseWidth(LPC_PWM1, i, 1500);
		Chip_PWM_SetPulseWidth(LPC_PWM1, i, LPC_PWM1->MR0 - 1500);
	}

	for (uint8_t i = 1; i <= 6; i++) {
		Chip_PWM_SetControlMode(LPC_PWM1, i, PWM_SINGLE_EDGE_CONTROL_MODE, PWM_OUT_ENABLED);
	}

	LPC_PWM1->TCR |= 0b1001;

	Chip_PWM_Reset(LPC_PWM1);
}

//Twos complement multiply and divide.
uint32_t multDiv(uint32_t twosComp, uint32_t positive, char function) {
	if (function == '*') {
		if ((twosComp>>31) == 0) {
			return twosComp * positive;
		} else {
			return neg(neg(twosComp) * positive);
		}
	} else {
		if ((twosComp>>31) == 0) {
			return twosComp / positive;
		} else {
			return neg(neg(twosComp) / positive);
		}
	}
}

//Convert uint16_t to uint32_t.
uint32_t to32(uint16_t twoByte) {
	if ((twoByte>>15) == 0) {
		return (uint32_t) twoByte;
	} else {
		return (uint32_t) twoByte | 0xFFFF0000;
	}
}

//Reads a bit from the button byte in the command.
Bool button(uint16_t *cmd, uint8_t bit) {
	return (cmd[BTN] & (1<<bit)) != 0;
}

//Converts hexadecimal characters to an integer.
uint8_t ToInt(char *byte, const uint8_t index) {
	uint8_t data;

	if (isxdigit(byte[index])) {
		if (isdigit(byte[index])) {
			data = (uint8_t) (byte[index] - '0')<<4u;
		} else if (isupper(byte[index])) {
			data = (uint8_t) (byte[index] - 'A' + 10u)<<4u;
		} else if (islower(byte[index])) {
			data = (uint8_t) (byte[index] - 'a' + 10u)<<4u;
		}
	} else {
		return 0;
	}

	if (isxdigit(byte[index + 1])) {
		if (isdigit(byte[index + 1])) {
			data |= (uint8_t) (byte[index + 1] - '0');
		} else if (isupper(byte[index + 1])) {
			data |= (uint8_t) (byte[index + 1] - 'A' + 10u);
		} else if (islower(byte[index + 1])) {
			data |= (uint8_t) (byte[index + 1] - 'a' + 10u);
		}
	} else {
		return 0;
	}

	return data;
}

/* State machine handler for I2C0 and I2C1 */
static void i2c_state_handling(I2C_ID_T id)
{
	if (Chip_I2C_IsMasterActive(id)) {
		Chip_I2C_MasterStateHandler(id);
	} else {
		Chip_I2C_SlaveStateHandler(id);
	}
}

/**
 * @brief	I2C Interrupt Handler
 * @return	None
 */
void I2C1_IRQHandler(void)
{
	i2c_state_handling(I2C1);
}

//I think that this is an old function that was intended to show a compass on the monitor.
void ToCompass(uint16_t *quat, char * comp) {

	strcpy(comp,
			"     \r\n"
			"     \r\n"
			"  O  \r\n"
			"     \r\n"
			"     \r\n"
	);

	uint16_t quatZ = quat[QZ];

	if (quatZ > 0) {
		comp[5 * 7 + 3] = '-';
		comp[5 * 7 + 4] = '>';
	} else {
		comp[5 * 7 + 1] = '-';
		comp[5 * 7] = '<';
	}
}

//Converts a Quat to a Quat64.
void toQuat64(Quat64 *qo, Quat *qi) {
	(*qo).w = (int64_t) (*qi).w;
	(*qo).x = (int64_t) (*qi).x;
	(*qo).y = (int64_t) (*qi).y;
	(*qo).z = (int64_t) (*qi).z;
}

//Converts a Quat64 to a Quat.
void toQuat32(Quat *qo, Quat64 *qi) {
	(*qo).w = (int32_t) (*qi).w;
	(*qo).x = (int32_t) (*qi).x;
	(*qo).y = (int32_t) (*qi).y;
	(*qo).z = (int32_t) (*qi).z;
}

//Hamilton product of two quaternions.
void Qham(Quat *y, Quat *a, Quat *b) {

	Quat64 transfer;
	Quat64 a64;
	Quat64 b64;

	toQuat64(&a64, a);
	toQuat64(&b64, b);

	transfer.w = ((a64.w * b64.w) - (a64.x * b64.x) - (a64.y * b64.y) - (a64.z * b64.z)) / DEC_PT;
	transfer.x = ((a64.w * b64.x) + (a64.x * b64.w) + (a64.y * b64.z) - (a64.z * b64.y)) / DEC_PT;
	transfer.y = ((a64.w * b64.y) - (a64.x * b64.z) + (a64.y * b64.w) + (a64.z * b64.x)) / DEC_PT;
	transfer.z = ((a64.w * b64.z) + (a64.x * b64.y) - (a64.y * b64.x) + (a64.z * b64.w)) / DEC_PT;

	toQuat32(y, &transfer);
}

//Conjugate of a quaternion.
void Qconj(Quat *qo, Quat *qi) {
	(*qo).w = (*qi).w;
	(*qo).x = -(*qi).x;
	(*qo).y = -(*qi).y;
	(*qo).z = -(*qi).z;
}

//Returns the square of the norm of a quaternion.
int32_t QnormSqr(Quat *q) {

	Quat64 q64;

	toQuat64(&q64, q);

	return (int32_t) (((q64.w * q64.w) + (q64.x * q64.x) + (q64.y * q64.y) + (q64.z * q64.z)) / DEC_PT);
}

//Convert uint16_t to int32_t.
int32_t U16toS32(uint16_t twoByte) {
	return ((twoByte & (1<<15)) > 0) ? -((int32_t) ((~(twoByte) + 1) & 0xFFFF)) : (int32_t) twoByte;
}

int32_t sqrtFix(int64_t n) {

	int64_t a = 1;
	int64_t b = n;

	while (abs(a - b) > 1) {
		b = n / a;
		a = (a + b) / 2;
	}

	return (int32_t) (a * 128);
}

int32_t Qnorm(Quat *q) {
	Quat64 q64;

	toQuat64(&q64, q);

	return (int32_t) sqrtFix(((q64.w * q64.w) + (q64.x * q64.x) + (q64.y * q64.y) + (q64.z * q64.z)) / DEC_PT);
}

void Qnormalize(Quat *qo, Quat *qi) {

	int32_t norm = Qnorm(qi);

	(*qo).w = (*qi).w / norm;
	(*qo).x = (*qi).x / norm;
	(*qo).y = (*qi).y / norm;
	(*qo).z = (*qi).z / norm;
}

int32_t Anorm

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief	main routine for example_lwip_tcpecho_sa_17xx40xx
 * @return	Function should not exit.
 */
int main(void)
{
	extern int fs_init(void);
	uint32_t physts;
	ip_addr_t ipaddr, netmask, gw;
	static int prt_ip = 0;

	uint8_t temp[0x10];
	char tempStr[16] = "";

	//Thruster control variables.
	uint16_t cmd[7] = {0, 0, 0, 0, 0, 0, 0};
	Bool started = false;
	uint32_t thruster[] = {0, 0, 0, 0, 0, 0};

	int16_t euler[] = {0, 0, 0};
	int16_t quat[] = {0, 0, 0, 0};
	int16_t rotVel[] = {0, 0, 0};

	Quat error;
	Quat measured_value = {.w = 0, .x = 0, .y = 0, .z = 0};
	Quat output = {.w = 0, .x = 0, .y = 0, .z = 0};
	Quat setpoint = {.w = 0, .x = 0, .y = 0, .z = 0};
	Quat velocity = {.w = 0, .x = 0, .y = 0, .z = 0};
	int32_t Pq[] = {20, 20, 20};
	int32_t Pw[] = {4, 4, 4};
//	uint8_t id;

	for (uint16_t i = 0; i < htmlSize; i++) {

		http_index_html[i] = '\0';
	}

	ROVparams[0] = '\0';
	ROVparam_vals[0] = '\0';
	http_index_html[0] = '\0';

	prvSetupHardware();

	InitPWM();

	/* In hitex evaluation boards, the Ethernet interface and 
	 * SDCARD interface are mutually exclusive
	 */
#if defined(LWIP_FATFS_SUPPORT)
	/* Initialize the file system */
	fs_init();
#endif

	/* Initialize LWIP */
	lwip_init();

	LWIP_DEBUGF(LWIP_DBG_ON, ("Starting LWIP TCP echo server...\n"));

	/* Static IP assignment */
#if LWIP_DHCP
	IP4_ADDR(&gw, 0, 0, 0, 0);
	IP4_ADDR(&ipaddr, 0, 0, 0, 0);
	IP4_ADDR(&netmask, 0, 0, 0, 0);
#else
#if MICRO2
	IP4_ADDR(&gw, 192, 168, 1, 1);
	IP4_ADDR(&ipaddr, 192, 168, 1, 123);
#else
	IP4_ADDR(&gw, 192, 168, 1, 1);
	IP4_ADDR(&ipaddr, 192, 168, 1, 61);
#endif
	IP4_ADDR(&netmask, 255, 255, 255, 0);
	//APP_PRINT_IP(&ipaddr);
#endif

	/* Add netif interface for lpc17xx_8x */
	netif_add(&lpc_netif, &ipaddr, &netmask, &gw, NULL, lpc_enetif_init,
			  ethernet_input);
	netif_set_default(&lpc_netif);
	netif_set_up(&lpc_netif);

#if LWIP_DHCP
	dhcp_start(&lpc_netif);
#endif

	/* Initialize and start application */
	httpd_init();

	/* This could be done in the sysTick ISR, but may stay in IRQ context
	   too long, so do this stuff with a background loop. */
	while (1) {
		/* Handle packets as part of this loop, not in the IRQ handler */
		lpc_enetif_input(&lpc_netif);

		/* lpc_rx_queue will re-qeueu receive buffers. This normally occurs
		   automatically, but in systems were memory is constrained, pbufs
		   may not always be able to get allocated, so this function can be
		   optionally enabled to re-queue receive buffers. */
#if 0
		while (lpc_rx_queue(&lpc_netif)) {}
#endif

		/* Free TX buffers that are done sending */
		lpc_tx_reclaim(&lpc_netif);

		/* LWIP timers - ARP, DHCP, TCP, etc. */
		sys_check_timeouts();

		/* Call the PHY status update state machine once in a while
		   to keep the link status up-to-date */
		physts = lpcPHYStsPoll();

		/* Only check for connection state when the PHY status has changed */
		if (physts & PHY_LINK_CHANGED) {
			if (physts & PHY_LINK_CONNECTED) {
				Board_LED_Set(0, true);
				prt_ip = 0;

				/* Set interface speed and duplex */
				if (physts & PHY_LINK_SPEED100) {
					Chip_ENET_Set100Mbps(LPC_ETHERNET);
					NETIF_INIT_SNMP(&lpc_netif, snmp_ifType_ethernet_csmacd, 100000000);
				}
				else {
					Chip_ENET_Set10Mbps(LPC_ETHERNET);
					NETIF_INIT_SNMP(&lpc_netif, snmp_ifType_ethernet_csmacd, 10000000);
				}
				if (physts & PHY_LINK_FULLDUPLX) {
					Chip_ENET_SetFullDuplex(LPC_ETHERNET);
				}
				else {
					Chip_ENET_SetHalfDuplex(LPC_ETHERNET);
				}

				netif_set_link_up(&lpc_netif);
			}
			else {
				Board_LED_Set(0, false);
				Board_LED_Set(1, false);
				netif_set_link_down(&lpc_netif);
			}

			DEBUGOUT("Link connect status: %d\r\n", ((physts & PHY_LINK_CONNECTED) != 0));
		}

		/* Print IP address info */
		if (!prt_ip) {
			if (lpc_netif.ip_addr.addr) {
				static char tmp_buff[16];
				DEBUGOUT("IP_ADDR    : %s\r\n", ipaddr_ntoa_r((const ip_addr_t *) &lpc_netif.ip_addr, tmp_buff, 16));
				DEBUGOUT("NET_MASK   : %s\r\n", ipaddr_ntoa_r((const ip_addr_t *) &lpc_netif.netmask, tmp_buff, 16));
				DEBUGOUT("GATEWAY_IP : %s\r\n", ipaddr_ntoa_r((const ip_addr_t *) &lpc_netif.gw, tmp_buff, 16));
				prt_ip = 1;
				Board_LED_Set(1, true);
			}
		}

		//Read quaternion data.
		readIMU(QUA_DATA_W_LSB, temp, 8);

		//Put quaternion data into array.
		for (uint8_t i = 0; i < 4; i++) {

			quat[i] = (int16_t) temp[2 * i];
			quat[i] |= (int16_t) temp[2 * i + 1]<<8;
			quat[i] = ((quat[2 * i + 1]>>7) > 0) ? -(~quat[i] + 1) : quat[i];
		}

		//Move the orientation array into a quaternion.
		measured_value.w = (int32_t) quat[0];
		measured_value.x = (int32_t) quat[1];
		measured_value.y = (int32_t) quat[2];
		measured_value.z = (int32_t) quat[3];

		//Buttons
		if ((strcmp(ROVparams, "ROV") == 0) && toggle) {

			for (char *i = http_index_html; *i != '\0'; i++) {
				*i = '\0';
			}

			strcat(http_index_html, "{");

			//Water detection.
			strcat(http_index_html, "\"Water\": \"");

			if (Chip_GPIO_GetPinState(LPC_GPIO, WDP[0], WDP[1]) == FALSE) {

				strcat(http_index_html, "Detected\",");

			} else {
				strcat(http_index_html, "Safe\",");
			}

			//Start ROV.
			strcat(http_index_html, "\"Started\" : \"");

			if (button(cmd, 0) || (started == TRUE)) {
				started = TRUE;
				strcat(http_index_html, "True\",");
			} else {
				strcat(http_index_html, "False\",");
			}

			if (!button(cmd, 2) && button(cmd, 1)) {
				Board_LED_Toggle(BLUELED);
			}

			if (button(cmd, 2) && button(cmd, 1)) {
				Board_LED_Set(BLUELED, true);

			}

			if (button(cmd, 2) && !button(cmd, 1)) {
				Board_LED_Set(BLUELED, FALSE);
			}

			//IMU.
			strcat(http_index_html, "\"IMU\": \"");

			if (button(cmd, 3)) {

				strcat(http_index_html, "Enabled\",");

				strcat(http_index_html, "\"Euler\": [");

				//Read Euler data.
				readIMU(EUL_DATA_X_LSB, temp, 6);

				//Put Euler data into array.
				for (uint8_t i = 0; i < 3; i++) {

					euler[i] = (int16_t) temp[2 * i];
					euler[i] |= (int16_t) temp[2 * i + 1]<<8;
					euler[i] = ((euler[2 * i + 1]>>7) > 0) ? -(~euler[i] + 1) : euler[i];

					itoa(euler[i], tempStr, 10);
					strcat(http_index_html, tempStr);

					if (i < 2) {
						strcat(http_index_html, ", ");
					}
				}

				strcat(http_index_html, "],\"Quat\": [");

				//Put quaternion data into array.
				for (uint8_t i = 0; i < 4; i++) {

					itoa(quat[i], tempStr, 10);
					strcat(http_index_html, tempStr);

					if (i < 3) {
						strcat(http_index_html, ", ");
					}
				}

				//Read rotational velocity data.
				readIMU(GYR_DATA_X_LSB, temp, 6);

				strcat(http_index_html, "],\"Rotational_Velocity\": [");

				//Put rotational velocity data into array.
				for (uint8_t i = 0; i < 3; i++) {

					rotVel[i] = (int16_t) temp[2 * i];
					rotVel[i] |= (int16_t) temp[2 * i + 1]<<8;
					rotVel[i] = ((rotVel[2 * i + 1]>>7) > 0) ? -(~rotVel[i] + 1) : rotVel[i];

					itoa(rotVel[i], tempStr, 10);
					strcat(http_index_html, tempStr);

					if (i < 2) {
						strcat(http_index_html, ", ");
					}
				}

				//Send IMU calibration to the Raspberry Pi.
				strcat(http_index_html, "],\"Calibration\": ");

				readIMU(CALIB_STAT, temp, 1);
				itoa(temp[0], tempStr, 10);
				strcat(http_index_html, tempStr);

				//The square of the norm should be about 16384.
				strcat(http_index_html, ",\"Norm_Squared\": ");

				itoa((int) QnormSqr(&measured_value), tempStr, 10);
//				itoa(sizeof(int16_t), tempStr, 10);
				strcat(http_index_html, tempStr);
				strcat(http_index_html, ", ");

				strcat(http_index_html, "\"Output\": [");

				itoa(output.x, tempStr, 10);
				strcat(http_index_html, tempStr);
				strcat(http_index_html, ", ");

				itoa(output.y, tempStr, 10);
				strcat(http_index_html, tempStr);
				strcat(http_index_html, ", ");

				itoa(output.z, tempStr, 10);
				strcat(http_index_html, tempStr);

				strcat(http_index_html, "],");

			} else {
				strcat(http_index_html, "Disabled\",\"Euler\": [0, 0, 0],\"Quat\": [0, 0, 0, 0],\"Rotational_Velocity\": [0, 0, 0],\"Calibration\": 0,\"Norm_Squared\": 0,\"Output\": [0, 0, 0],");
			}

			strcat(http_index_html, "\"PWM\": [");

			for (int i = 0; i < 6; i++) {

				itoa(thruster[i], tempStr, 10);
				strcat(http_index_html, tempStr);

				if (i < 5) {
					strcat(http_index_html, ",");
				}
			}

			strcat(http_index_html, "],");

			strcat(http_index_html, "\"LED\": ");

			if (Board_LED_Test(BLUELED)) {
				strcat(http_index_html, "\"On\"");
			} else {
				strcat(http_index_html, "\"Off\"");
			}

			//Turn character string into an integer array.
			for (uint8_t i = 0; i < 7; i++) {
				cmd[i] = ToInt(ROVparam_vals, i * 4)<<8;
				cmd[i] |= ToInt(ROVparam_vals, (i * 4) + 2);
			}

			strcat(http_index_html, "}");

			toggle = FALSE;
		}

		//Only use the output quaternion if the IMU is enabled.
		if (button(cmd, 3)) {

			//Read Euler data.
			readIMU(EUL_DATA_X_LSB, temp, 6);

			//Put Euler data into array.
			for (uint8_t i = 0; i < 3; i++) {

				euler[i] = (int16_t) temp[2 * i];
				euler[i] |= (int16_t) temp[2 * i + 1]<<8;
				euler[i] = ((euler[2 * i + 1]>>7) > 0) ? -(~euler[i] + 1) : euler[i];
			}

			//Read rotational velocity data.
			readIMU(GYR_DATA_X_LSB, temp, 6);

			//Put rotational velocity data into array.
			for (uint8_t i = 0; i < 3; i++) {

				rotVel[i] = (int16_t) temp[2 * i];
				rotVel[i] |= (int16_t) temp[2 * i + 1]<<8;
				rotVel[i] = ((rotVel[2 * i + 1]>>7) > 0) ? -(~rotVel[i] + 1) : rotVel[i];
			}

			//Move the rotational velocity array into a quaternion.
			velocity.x = (int32_t) rotVel[0];
			velocity.y = (int32_t) rotVel[1];
			velocity.z = (int32_t) rotVel[2];

			//TODO Convert rotation command to quaternion.

			//Calculate error.
			Qconj(&error, &measured_value);
			Qham(&error, &setpoint, &error);

			//Amplify error and mix with rotational velocity.
			output.x = ((-Pq[0] * error.x) - (Pw[0] * velocity.x)) * ((error.w < 0) ? -1 : 1);
			output.y = ((-Pq[1] * error.y) - (Pw[1] * velocity.y)) * ((error.w < 0) ? -1 : 1);
			output.z = ((-Pq[2] * error.z) - (Pw[2] * velocity.z)) * ((error.w < 0) ? -1 : 1);

			//Prevent underflow during conversion to uint32_t and keep output between the max and min pulse-widths.
//			output.x = ((output.x < 0) ? 0 : output.x);
//			output.x = ((output.x > 0) ? MAXPW : output.x);
//			output.y = ((output.y < 0) ? 0 : output.y);
//			output.y = ((output.y > MAXPW) ? MAXPW : output.y);
//			output.z = ((output.z < 0) ? 0 : output.z);
//			output.z = ((output.z > MAXPW) ? MAXPW : output.z);

			//TODO Convert output rotation to thruster pulse width.
			thruster[FRT] = (uint32_t) 1500 + ((-U16toS32(cmd[TX]) + U16toS32(cmd[TY]) - output.z) * MAXPW / 0x8000);
			thruster[FLT] = (uint32_t) 1500 + ((U16toS32(cmd[TX]) + U16toS32(cmd[TY]) + output.z) * MAXPW / 0x8000);
			thruster[BRT] = (uint32_t) 1500 + ((U16toS32(cmd[TX]) + U16toS32(cmd[TY]) - output.z) * MAXPW / 0x8000);
			thruster[BLT] = (uint32_t) 1500 + ((-U16toS32(cmd[TX]) + U16toS32(cmd[TY]) + output.z) * MAXPW / 0x8000);

			thruster[RVT] = (uint32_t) 1500 - ((-U16toS32(cmd[TZ]) + output.y) * MAXPW / 0x8000);
			thruster[LVT] = (uint32_t) 1500 - ((-U16toS32(cmd[TZ]) - output.y) * MAXPW / 0x8000);

		} else {

			//Set the setpoint to the direction that the ROV is already pointing in.
			setpoint.w = measured_value.w;
			setpoint.x = measured_value.x;
			setpoint.y = measured_value.y;
			setpoint.z = measured_value.z;

			//Convert command to data.
			thruster[FRT] = (uint32_t) 1500 + ((-U16toS32(cmd[TX]) + U16toS32(cmd[TY]) - U16toS32(cmd[RZ])) * MAXPW / 0x8000);
			thruster[FLT] = (uint32_t) 1500 + ((U16toS32(cmd[TX]) + U16toS32(cmd[TY]) + U16toS32(cmd[RZ])) * MAXPW / 0x8000);
			thruster[BRT] = (uint32_t) 1500 + ((U16toS32(cmd[TX]) + U16toS32(cmd[TY]) - U16toS32(cmd[RZ])) * MAXPW / 0x8000);
			thruster[BLT] = (uint32_t) 1500 + ((-U16toS32(cmd[TX]) + U16toS32(cmd[TY]) + U16toS32(cmd[RZ])) * MAXPW / 0x8000);

			thruster[RVT] = (uint32_t) (1500 - ((-U16toS32(cmd[TZ]) + U16toS32(cmd[RY])) * MAXPW / 0x8000));
			thruster[LVT] = (uint32_t) (1500 - ((-U16toS32(cmd[TZ]) - U16toS32(cmd[RY])) * MAXPW / 0x8000));
		}

		if (started) {

			//Check and correct for over-current.
			if (thruster[FRT] > 1700) thruster[FRT] = 1500u + MAXPW;
			if (thruster[FRT] < 1300) thruster[FRT] = 1500u - MAXPW;

			if (thruster[FLT] > 1700) thruster[FLT] = 1500u + MAXPW;
			if (thruster[FLT] < 1300) thruster[FLT] = 1500u - MAXPW;

			if (thruster[BRT] > 1700) thruster[BRT] = 1500u + MAXPW;
			if (thruster[BRT] < 1300) thruster[BRT] = 1500u - MAXPW;

			if (thruster[BLT] > 1700) thruster[BLT] = 1500u + MAXPW;
			if (thruster[BLT] < 1300) thruster[BLT] = 1500u - MAXPW;

			if (thruster[RVT] > 1700) thruster[RVT] = 1500u + MAXPW;
			if (thruster[RVT] < 1300) thruster[RVT] = 1500u - MAXPW;

			if (thruster[LVT] > 1700) thruster[LVT] = 1500u + MAXPW;
			if (thruster[LVT] < 1300) thruster[LVT] = 1500u - MAXPW;

			/*	Update PWM to ESCs.	*/
			Chip_PWM_SetPulseWidth(LPC_PWM1, FRT + 1, LPC_PWM1->MR0 - thruster[FRT]);
			Chip_PWM_SetPulseWidth(LPC_PWM1, FLT + 1, LPC_PWM1->MR0 - thruster[FLT]);
			Chip_PWM_SetPulseWidth(LPC_PWM1, BRT + 1, LPC_PWM1->MR0 - thruster[BRT]);
			Chip_PWM_SetPulseWidth(LPC_PWM1, BLT + 1, LPC_PWM1->MR0 - thruster[BLT]);
			Chip_PWM_SetPulseWidth(LPC_PWM1, RVT + 1, LPC_PWM1->MR0 - thruster[RVT]);
			Chip_PWM_SetPulseWidth(LPC_PWM1, LVT + 1, LPC_PWM1->MR0 - thruster[LVT]);
		}
	}

	/* Never returns, for warning only */
	return 0;
}
